import ssl
import socket
import whois
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import pyfiglet
import time
import random

def print_title():
    title = pyfiglet.figlet_format("Pentest Probe")
    print(title)

# Step 2: Check SSL/TLS validity
def check_ssl_tls(domain):
    print(f"Checking SSL/TLS for {domain}")
    context = ssl.create_default_context()
    conn = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=domain)
    conn.settimeout(5.0)

    try:
        conn.connect((domain, 443))
        cert = conn.getpeercert()
        print(f"SSL/TLS status: Valid")
        return True, cert
    except Exception as e:
        print(f"SSL/TLS status: Invalid")
        return False, str(e)

# Step 3: Identify website hosting provider
def get_hosting_provider(domain):
    print(f"Getting hosting provider for {domain}")
    try:
        domain_info = whois.whois(domain)
        print(f"Hosting provider: {domain_info.org}")
        return domain_info.org
    except Exception as e:
        print(f"Failed to get hosting provider: {e}")
        return None

# Step 4: Check for security headers
def check_security_headers(url):
    print(f"Checking security headers for {url}")
    security_headers = [
        "Content-Security-Policy", "Strict-Transport-Security", "X-Content-Type-Options",
        "X-Frame-Options", "X-XSS-Protection"
    ]
    headers_info = {}

    try:
        response = requests.get(url)
        for header in security_headers:
            headers_info[header] = response.headers.get(header, "Not Found")
    except requests.RequestException as e:
        print(f"Failed to check security headers: {e}")

    print("Security headers:")
    for header, value in headers_info.items():
        print(f"{header}: {value}")

    return headers_info

# Step 5: Check for SQL injection and XSS vulnerabilities
def check_sql_injection(domain):
    print(f"Checking SQL injection vulnerabilities for {domain}")
    sql_payload = "' OR '1'='1"
    try:
        response = requests.get(f"http://{domain}/{sql_payload}")
        if "error" not in response.text.lower():
            print(f"SQL Injection vulnerability found")
        else:
            print("No SQL Injection vulnerability found")
    except requests.RequestException as e:
        print(f"Failed to test SQL injection: {e}")

def check_xss(domain):
    print(f"Checking XSS vulnerabilities for {domain}")
    xss_payload = "<script>alert('XSS')</script>"
    try:
        response = requests.get(f"http://{domain}/{xss_payload}")
        if xss_payload in response.text:
            print(f"XSS vulnerability found")
        else:
            print("No XSS vulnerability found")
    except requests.RequestException as e:
        print(f"Failed to test XSS: {e}")

# Step 6: Check for directory listing vulnerabilities
def check_directory_listing(domain):
    print(f"Checking directory listing vulnerabilities for {domain}")
    try:
        response = requests.get(f"http://{domain}/")
        if "Index of /" in response.text:
            print(f"Directory listing vulnerability found")
        else:
            print("No directory listing vulnerability found")
    except requests.RequestException as e:
        print(f"Failed to test directory listing: {e}")

# Step 7: Check server information
def check_outdated_server(domain):
    print(f"Checking server information for {domain}")
    try:
        response = requests.get(f"http://{domain}/")
        server_header = response.headers.get("Server", "Not Found")
        print(f"Server header: {server_header}")
    except requests.RequestException as e:
        print(f"Failed to get server info: {e}")

# Step 8: Generate a report
def generate_report(domain, ssl_info, hosting_provider, security_headers):
    safe_domain = domain.replace('http://', '').replace('https://', '').replace('www.', '').replace('/', '_')

    report = f"Website Scan Report for {domain}\n\n"
    report += f"SSL/TLS Status: {'Valid' if ssl_info[0] else 'Invalid'}\n"
    report += f"Hosting Provider: {hosting_provider}\n\n"
    report += "Security Headers:\n"
    for header, value in security_headers.items():
        report += f"{header}: {value}\n"

    with open(f"{safe_domain}_scan_report.txt", "w") as report_file:
        report_file.write(report)

    print(f"Report saved as {safe_domain}_scan_report.txt")

# Main function to run all checks
def main(domain):
    domain = domain.replace('http://', '').replace('https://', '').replace('www.', '').rstrip('/')

    ssl_info = check_ssl_tls(domain)
    hosting_provider = get_hosting_provider(domain)
    security_headers = check_security_headers(f"http://{domain}")
    check_sql_injection(domain)
    check_xss(domain)
    check_directory_listing(domain)
    check_outdated_server(domain)

    generate_report(domain, ssl_info, hosting_provider, security_headers)

if __name__ == "__main__":
    print_title()
    domain = input("Enter the domain to scan: ")
    main(domain)
